# -*- coding: utf-8 -*-
"""Trabalho Testes de Hipóteses.ipynb

Automatically generated by Colaboratory.

**Teste de Hipóteses para médias de populações normais com variâncias 
conhecidas; 
(bilateral, à direita ou à esquerda)**
"""

import statistics
import numpy as np
import math
import scipy.stats as st

# Se vc não conhecer a média use n-1 nos graus de lib
def teste_z_bilateral(h0,graus,var,x,alpha): #rejeição dos dois lados

  zcalc= (x-h0) / np.sqrt(var/graus)   #graus é o n // # α é --> alpha // # σ é--> var
  #zcalc= (43-45)/raiz(36/16)
  print("z_calc",zcalc)

  X1=st.norm.ppf((alpha/100)/2)    # X=st.norm.ppf(alpha/100)
  X2=st.norm.ppf(1-(alpha/100)/2)
  print("O valor do z1 é:",X1, "O valor de z2 é:", X2)

  if zcalc > X1 and zcalc < X2:  #se zalc for MAIOR que X1 e zcalc for MENOR que X2
    print("Decide-se não rejeitar a hipótese inicial pois zcalc pertence à RNR")
  else:
    print("Decide-se rejeitar a hipótese inicial pois zcalc pertence à RC")

teste_z_bilateral(45,16,36,43,10)  #graus é o n ---- alpha é a variância

"""---------------------------------------"""

def teste_z_direita(h0,graus,var,x,alpha):

  zcalc= (x-h0) / np.sqrt(var/graus)      #graus é o n 
  print("z_calc",zcalc)                  # α é --> alpha // # σ é--> variancia
                                            # σ**2
  X=st.norm.ppf(alpha/100)          # X=st.norm.ppf(alpha/100)    
  print("O valor de z é:",X)     

  if zcalc < X:  #se chicalc for MENOR que X
   print("Decide-se não rejeitar a hipótese inicial pois zcalc pertence à RNR")
  else:
   print("Decide-se rejeitar a hipótese inicial pois zcalc pertence à RC")

teste_z_direita(206,30,12**2,210,10)

"""------------------------------"""

def teste_z_esquerda(h0,graus,var,x,alpha):
  
  zcalc=(x-h0) / np.sqrt(var/graus)    # α é --> alpha // # σ é--> var
  print("z_calc",zcalc)

  X=st.norm.ppf(alpha/100)          # X=st.norm.ppf(alpha/100)
  print("O valor de z é:",X)    

  if zcalc > X:  #se chicalc for MAIOR que X
   print("Decide-se não rejeitar a hipótese inicial pois zcalc pertence à RNR")
  else:
   print("Decide-se rejeitar a hipótese inicial pois zcalc pertence à RC")

teste_z_esquerda(26,10,5.86,25.3,5)

"""----------------------------------------------------------

**Teste de Hipóteses para médias de populações normais com variâncias 
desconhecidas;**
"""

# Se vc não conhecer a média use n-1 nos graus de lib
def teste_t_bilateral(h0,graus,x,s,alpha):

  tcalc= (x - h0) / np.sqrt(s/graus)    # α é --> alpha (ex:10%) // # σ é--> var
  print("t_calc",tcalc)                 # s é desvio padrão // x é a média

  X1=st.t.ppf((alpha/100)/2,graus)   # -- X=st.t.ppf(alpha/100, graus) variâncias desconhecidas
  X2=st.t.ppf(1-(alpha/100)/2,graus)
  print("O valor de t1 é:",X1, "O valor de t2 é:", X2)

  if tcalc > X1 and tcalc < X2:  #se tcalc for MAIOR que X1 e zcalc for MENOR que X2
    print("Decide-se não rejeitar a hipótese inicial pois tcalc pertence à RNR")
  else:
    print("Decide-se rejeitar a hipótese inicial pois tcalc pertence à RC")

teste_t_bilateral(1120,8,1070,125**2,1)  #graus é o n ---- alpha é a variância

def teste_t_direita(h0,graus,x,s,alpha):

  tcalc=(x - h0) / np.sqrt(s/graus)    # α é --> alpha // # σ é--> var
  print("tcalc",tcalc)          # s**2 é desvio padrão // x é a média

  X=st.t.ppf(1-alpha/100,graus)    # -- X=st.t.ppf(alpha/100, graus) variâncias desconhecidas
  print("O valor do t é:",X)

  if tcalc < X:  #se tcalc for MENOR que X
   print("Decide-se não rejeitar a hipótese inicial pois tcalc pertence à RNR")
  else:
   print("Decide-se rejeitar a hipótese inicial pois tcalc pertence à RC")

teste_t_direita(1,10,1.004,0.003**2,10)

"""------------------------------"""

def teste_t_esquerda(h0,graus,x,s,alpha):
  
  tcalc=(x - h0) / np.sqrt(s/graus)    # α é --> alpha // # σ é--> var
  print("tcalc",tcalc)   #s**2

  X=st.t.ppf(alpha/100,graus)           #-- X=st.t.ppf(alpha/100, graus) variâncias desconhecidas
  print("O valor de t é:",X)

  if tcalc > X:  #se tcalc for MAIOR que X
   print("Decide-se não rejeitar a hipótese inicial pois tcalc pertence à RNR")
  else:
   print("Decide-se rejeitar a hipótese inicial pois tcalc pertence à RC")

teste_t_esquerda(40,25,38,0.5**2,5)

"""----------------------------------------------

**Teste de Hipóteses para proporções de populações normais;**
"""

def teste_z_direita(h0,p0,graus,q0,alpha):

  zcalc=(p0-h0) / np.sqrt((p0*q0)/graus)   # α é --> alpha // # σ é--> var
  print("zcalc",zcalc)

  X=st.norm.ppf(1-(alpha/100))   # X=st.norm.ppf(1-alpha/100)
  print("O valor de z é:",X)

  if zcalc < X:  #se zcalc for MENOR que X
   print("Decide-se não rejeitar a hipótese inicial pois zcalc pertence à RNR")
  else:
   print("Decide-se rejeitar a hipótese inicial pois zcalc pertence à RC")

teste_z_direita(0.05,82/600,600,518/600,5) # p0-h0 / raiz (p0/graus * q0/graus)/graus

"""-----------------------------------------

**Teste de Hipóteses para diferença entre médias;**
"""

def calculo_variaveis(graus):

  xi = np.array([ [120, 104, 93, 87, 85, 98, 102, 106, 88, 90] ],dtype='double')
  yi = np.array([ [116, 102, 90, 83, 86, 97, 98, 108, 82, 85] ],dtype='double')

  print("xi",xi)
  print("yi",yi)

  di = xi - yi   #120-116=4, 104-102=2,.....
  print("di", di)

  di2 = di**2        #4^2=16, 2^2=4,....
  print("di^2", di2)

  print("------------")

  soma_di = di.sum()    # função soma di
  print("Soma di:", soma_di)

  print("------------")

  soma_di2 = di2.sum()    #função soma d2
  print("Soma di2:", soma_di2)

  print("------------")

  media = di.mean()         #função que calcula média df.mean()
  print("Média:", media)

  print("------------")

#1/(n-1)*somatório di2 - somatório di2 ** 2 / 10
  desvio = np.sqrt(1/(graus-1)*((soma_di2)-(soma_di**2)/graus)) #graus é o n

  print("Desvio padrão:", desvio)

calculo_variaveis(10)

def teste_t_direita(h0,graus,alpha,d,s):
                                          #d é a média
  tcalc= (d-h0) / np.sqrt(s/graus)    # graus é o n 
  print("tcalc",tcalc)       # α é --> alpha // # s**2 é --> desvio padrão

  X=st.t.ppf(1-alpha/100,graus)    # tcalc -- X=st.t.ppf(alpha/100, graus)
  print("O valor do t é:",X)

  if tcalc < X:  #se tcalc for MENOR que X
   print("Decide-se não rejeitar a hipótese inicial pois tcalc pertence à RNR")
  else:
   print("Decide-se rejeitar a hipótese inicial pois tcalc pertence à RC")

teste_t_direita(0,10,5,2.6,2.59**2)

"""------------------------------------

**Teste de Hipóteses para variâncias de populações normais (com médias 
conhecidas ou não);**
"""

# Se vc não conhecer a média use n-1 nos graus de lib 
def teste_chi_bilateral(h0,graus,var,alpha):    #erro dos dois lados

  chicalc=graus*var/h0
  print("qui_quad_calc",chicalc)       # α é --> alpha // # σ é--> var

  X1=st.chi2.ppf((alpha/100)/2,graus)
  X2=st.chi2.ppf(1-(alpha/100)/2,graus)
  print("O valor do qui1 é:",X1, "O valor de qui2 é:", X2)

  if chicalc > X1 and chicalc < X2:  #se chicalc for MAIOR que X1 e chicalc for MENOR que X2
    print("Decide-se não rejeitar a hipótese inicial pois chicalc pertence à RNR")
  else:
    print("Decide-se rejeitar a hipótese inicial pois chicalc pertence à RC")



def teste_chi_esquerda(h0,x,graus,alpha):
  
  chicalc= x/h0                       #graus é o n
  print("qui_quad_calc",chicalc)      # α é --> alpha // # σ é--> var

  X=st.chi2.ppf(alpha/100,graus)  
  print("O valor do x, qui_quadrado é:",X)
  
  if chicalc > X:   #se chicalc for MAIOR que X
   print("Decide-se não rejeitar a hipótese inicial pois chicalc pertence à RNR")
  else:
   print("Decide-se rejeitar a hipótese inicial pois chicalc pertence à RC")

teste_chi_esquerda(3600,129000,26,5)

def teste_chi_direita(h0,graus,var,alpha):
  
  chicalc=graus*var/h0                 # graus é o n
  print("qui_quad_calc",chicalc)       # α é --> alpha // # σ é--> var ou s também é variancia

  X=st.chi2.ppf(1-alpha/100,graus)
  print("O valor do x, qui_quadrado é:",X)

  if chicalc < X: #se chicalc for MENOR que X
   print("Decide-se não rejeitar a hipótese inicial pois chicalc pertence à RNR")
  else:
   print("Decide-se rejeitar a hipótese inicial pois chicalc pertence à RC")

teste_chi_direita (240**2, 8-1, 300**2, 5) # Se vc não conhecer a média use n-1 nos graus de lib / ex 2-1

"""------------------------------"""

